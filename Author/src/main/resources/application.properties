server.port=9000
spring.application.name=author-server
server.error.include-message=always
server.error.include-binding-errors=always

# Database
spring.datasource.url=jdbc:h2:mem:author-postgres-db
spring.datasource.username=author-postgres
spring.datasource.password=author-postgres
spring.h2.console.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.database=h2
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.defer-datasource-initialization=true


################## h2 ############################
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=true


#server.port=9000
#spring.application.name=author-server
#server.error.include-message=always
#server.error.include-binding-errors=always

## Database Postgres
##spring.datasource.url=jdbc:postgresql://localhost:5432/author-postgres-db
##spring.datasource.username=author-postgres
##spring.datasource.password=author-postgres
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.defer-datasource-initialization=true
##spring.datasource.platform=postgres
#
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.format_sql=true


#
############ Kubernetes Postgres ##################
##kubectl create configmap hostname-config --from-literal=postgres_host=$(kubectl get svc author-postgres-db -o jsonpath="{.spec.clusterIP}")
#spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}
#spring.datasource.username=${POSTGRES_USER}
#spring.datasource.password=${POSTGRES_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.defer-datasource-initialization=true
##spring.datasource.platform=postgres
#
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.format_sql=true
#
#
#### Postgres Docker image
##docker run --name myPostgresDb -p 5455:5432 -e POSTGRES_USER=sa -e POSTGRES_PASSWORD=password -e POSTGRES_DB=author-postgres-db -d postgres

################# Swagger ########################
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

#UI link to swagger API documentation: http://server:port/swagger-ui/swagger-ui.html or http://server:port/context-path/v3/api-docs


################ Prometheus ############################
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always
management.endpoints.enabled-by-default=true
management.metrics.tags.application=${spring.application.name}

management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.metrics.web.server.auto-time-requests= true

management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.http.client.requests=true

#### Run Prometheus as docker image
#docker run \
#    -p 9090:9090 \
#    -v <absolute-path>/Author/data/prometheus/config/prometheus.yaml:/etc/prometheus/prometheus.yml \
#    prom/prometheus


############## Grafana ####################
#docker run -d --name=grafana -p 3000:3000 grafana/grafana

############# Alternatives to Micrometer ##############
#https://skywalking.apache.org/
#https://opentelemetry.io/
#https://github.com/prometheus/jmx_exporter
#https://github.com/prometheus/client_java
#https://github.com/javamelody/javamelody/wiki/UserGuideAdvanced#exposing-metrics-to-prometheus

########## Knowledge links #######################
#https://blog.container-solutions.com/prometheus-operator-beginners-guide

### Deploy to kubernetes ####
# Install Helm and Helm charts
#  brew install helm (for Mac with Homebrew) or choco install kubernetes-helm or scoop install helm (Windows with Chocolatey or scoop)
#  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
#  helm repo update
#  helm install [RELEASE_NAME] prometheus-community/kube-prometheus-stack

# Default grafana password: prom-operator username: admin
# 1. helm install prometheus prometheus-community/kube-prometheus-stack or helm install prometheus stable/prometheus --namespace monitoring
# 2. kubectl get pods -n monitoring
# 3. configure the datasource for the grafana with prometheus

# JVM Micrometer dashboards IDs (4701,  11955, 12900)
# docker port minikube, minikube service list

#https://blog.container-solutions.com/prometheus-operator-beginners-guide

######################## Skywalking ##########################
## Backend service addresses.
#collector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES:127.0.0.1:11800}
#agent.service_name=${SW_AGENT_NAME:author-server}

# Skywalking commandline: java -javaagent:/<absolute-path>/skywalking-agent/skywalking-agent.jar=agent.service_name=author-server -jar Author-0.0.1-SNAPSHOT.jar
#Djavaagent=/<absolute-path>/skywalking-agent/skywalking-agent.jar
#Dskywalking.agent.service_name=author-service
#Dskywalking.collector.backend_service=127.0.0.1:11800

# Docker: <FROM apache/skywalking-java-agent:8.5.0-jdk8>
# Environmental variables
# SW_AGENT_NAME? The name of the service
#SW_AGENT_NAME=author-server
#SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800